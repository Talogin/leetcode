class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int sum = 0, sz = nums.size();
        for(int i = 0; i < 32; i++) {
            int cnt = 0;
            for(int k = 0; k < sz; k++) {
                cnt += (nums[k] >> i) & 1;
            }
            sum += cnt * (sz - cnt);
        }
        return sum;
    }
};

思路：
  这道题我思路大概是想出来了，对每一位都进行统计，看nums中有多少数在这位上1，有多少数在这位上是0，然后两个数量相乘。但是我遇到的问题是，第一，你怎么知道
  一共要统计多少位呢，你是不是得以nums中位数最多的那个数为基准呢，从它的最高位那位计算起呢？然后你怎么去操作每个数呢，以及如何操作每个数的每一位呢？这些
  我一开始都不太想的出来。
  这可能也是我对bit操作的生疏的体现。其实每个数都是int，都是32位长，那么你也不用那么麻烦去管什么位数最多的数字了，直接对32位每位都进行统计。
  然后对每个数的每位的统计，上面的方法也是经典的常规操作，需要去熟悉掌握。
