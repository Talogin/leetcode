class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        int i = 0;
        for(; i+2 < nums.size(); i+=2) {
            if(nums[i] <= nums[i+1] && nums[i+1] >= nums[i+2])  continue;
            else {
                int min_one = min(nums[i], min(nums[i+1], nums[i+2]));
                int max_one = max(nums[i], max(nums[i+1], nums[i+2]));
                int med = 0;
                if(min_one == nums[i]) {
                    if(max_one == nums[i+1]) {
                        med = nums[i+2];
                    } else {
                        med = nums[i+1];
                    }
                } else if(max_one == nums[i]) {
                    if(min_one == nums[i+1]) {
                        med = nums[i+2];
                    } else {
                        med = nums[i+1];
                    }
                } else {
                    med = nums[i];
                }
                nums[i] = min_one;
                nums[i+1] = max_one;
                nums[i+2] = med;
            }
        }
        if(i+2 == nums.size()) {
            if(nums[i] > nums[i+1])
                swap(nums[i], nums[i+1]);
        }
    }
};

错误写法：
void wiggleSort(vector<int>& nums) {
    for(int i = 0; i+2 < nums.size(); i+=2) {
        if(nums[i] <= nums[i+1] && nums[i+1] >= nums[i+2])  continue;
        else {
            int min_one = min(nums[i], min(nums[i+1], nums[i+2]));
            int max_one = max(nums[i], max(nums[i+1], nums[i+2]));
            int med = nums[i] == min_one || nums[i] == max_one ?
                      (nums[i+1] == min_one || nums[i+1] == max_one ? nums[i+2] : nums[i+1]) : nums[i];
            nums[i] = min_one;
            nums[i+1] = max_one;
            nums[i+2] = med;
            cout << min_one << " " << med << " " << max_one << endl;
        }
    }
}
错误原因在于呢，不能通过这种简单的相等来判断nums[i]~nums[i+2]中哪个是对应max,哪个对应min,从而计算中间值。一个反例就是1,1,2。
