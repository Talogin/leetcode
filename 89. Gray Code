class Solution {
    void utils(bitset<32>& bits, vector<int>& result, int k){
        if (k==0) {
            result.push_back(bits.to_ulong());
        }
        else {
            utils(bits, result, k-1);
            bits.flip(k-1);
            utils(bits, result, k-1);
        }
    }
public:
    vector<int> grayCode(int n) {
        bitset<32> bits;
        vector<int> result;
        utils(bits, result, n);
        return result;
    }
};

总结：
  这个recursion的方法很巧妙，因为bits这个参数是一个引用，所以每次对bits的更改都是会记录的，并且会对整个recursion过程有影响，所以，我们模拟一下
  这整个过程，这个过程有点类似dfs，不断地深入，知道k == 0，然后返回，比如说是对于某个k，第7行运行完，返回了，那么现在的bits是个什么状态呢，它一定
  是从某个叶子节点返回回来的，也就是k == 0一个节点，且它存入的那个结果一定是最新的结果，假设它为res，那么运行第8行，也就是改变第k-1位的状态，其他
  都不改变，那么它与res一定是只有一位是不同的，而改变之后又是类似地运行一个dfs，而且是第7行先运行，第7行是不改变任何位的，所以接着res之后存入的结
  果一定是这个与res只有1位不同的结果。

