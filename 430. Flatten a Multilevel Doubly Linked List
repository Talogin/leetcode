class Solution {
public:
    Node* flatten(Node* head) {
//         Node* node = head;
//         stack<Node*> stk;
        
//         if(!head)   return head;
//         //逐个访问
//         //如果有child，其next入栈,当前节点的next设为child，child的pre设为当前节点
//         //访问结束的标志是next为空且栈为空
//         //如果next为空，将当前节点的next设为栈top，栈top的pre设为当前节点
//         while(node->next || !stk.empty()) {
//             if(node->child) {
//                 stk.push(node->next);
//                 node->next = node->child;
//                 node->child->prev = node;
//                 node->child = nullptr;
//             } else if(!node->next) {
//                 node->next = stk.top();
//                 stk.top()->prev = node;
//                 stk.pop();
//             }
//             node = node->next;
//         }
//         return head;
        stack<Node*> stack;
        Node* travel = head;
        while(travel != NULL || !stack.empty()) {
            if(travel->child != NULL) {
                if(travel->next != NULL) stack.push(travel->next);
                travel->next = travel->child;
                travel->next->prev = travel;
                travel->child = nullptr;
            }else {
                if(travel->next == nullptr && !stack.empty()) {
                    travel->next = stack.top();
                    stack.pop();
                    travel->next->prev = travel;
                }
            }
            travel = travel->next;
        }
        return head;
    }
};

备注部分是我的解法，代码是有问题的，因为你以node->next作为判断依据来进入循环的话，有可能这个node有一串的child，但就是没有next，那么这个循环就进入不了
所以node访问的时候，千万小心，最好还是以node本身是否为Null作为判断条件，不要轻易以next作为判断条件。
易错的地方还是第33行，对child的置空操作，还有第30行，这一步是防止原链表的next为空，那么它就不存在prev指针，防止第38行出错。


class Solution {
public:
    Node* flatten(Node* head, Node* tail = nullptr) {
        Node* h = head;
        while(head) {
            iter = head;
            if(head->child) {
                Node* next = head->next;
                Node* child_next = flatten(head->child, next);
                head->next = child_next;
                child_next->prev = head;
                head->child = nullptr;
                if(next) next->prev = iter;
                head = next;
            } else  head = head->next; 
        }
        if(iter)    iter->next = tail;
        if(tail)    tail->prev = tail;
        return h;
    }
private:
    Node* iter = nullptr;
};


错误点：
  1.忘记第13行，这相当于对双向链表，向其中插入某个节点，忘记了更新后面那个节点的prev。所以链表题还是要理清要更新哪些指针。
