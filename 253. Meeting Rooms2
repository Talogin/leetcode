/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        if(intervals.empty())  return 0;
        sort(intervals.begin(), intervals.end(), [](Interval& x, Interval& y) {return x.start < y.start;});
        priority_queue<int, vector<int>, greater<int>> min_heap;
        for(int i = 0; i < intervals.size(); i++) {
            if(!min_heap.empty() && intervals[i].start >= min_heap.top()) min_heap.pop();
            min_heap.push(intervals[i].end);
        }
        return min_heap.size();
    }
};

思路：很明显的贪心问题，这道题依据start排序或者依据end排序都可以。比较巧妙地是使用了min_heap。
