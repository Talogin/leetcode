class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> graph;
        for(auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        
        int res = 0;
        unordered_set<int> visited;
        for(auto& e : edges)
            if(visited.find(e[0]) == visited.end()) {
                dfs(graph, e[0], visited, -1);
                res++;
            }
        return res;
    }
    
    void dfs(unordered_map<int, vector<int>>& graph, int node, unordered_set<int>& visited, int parent) {
        if(visited.find(node) != visited.end()) return;
        visited.insert(node);
        for(auto neigh : graph[node]) 
            if(neigh != parent)
                dfs(graph, neigh, visited, node);
    }
};

错误点：
  1.第12行的这个遍历是有问题的，因为如果有单独点构成的联通分量，它是不出现在edges中的，所以你是遍历不到它的，所以还是要用下面这种写法。
  
class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> graph;
        for(auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        
        int res = 0;
        unordered_set<int> visited;
        for(int i = 0; i < n; i++)
            if(visited.find(i) == visited.end()) {
                dfs(graph, i, visited, -1);
                res++;
            }
        return res;
    }
    
    void dfs(unordered_map<int, vector<int>>& graph, int node, unordered_set<int>& visited, int parent) {
        if(visited.find(node) != visited.end()) return;
        visited.insert(node);
        for(auto neigh : graph[node]) 
            if(neigh != parent)
                dfs(graph, neigh, visited, node);
    }
};



union-find

class Solution {
private:       
    int count = 0;
    vector<int> parent, ranks;
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        count = n;
        parent.resize(n);
        ranks.resize(n,1);
        for(int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for(auto& e : edges) {
            uni(e[0], e[1]);
        }
        return count;
    }
    
    int find(int x) {
        if(x != parent[x]) {
            parent[x] = find(parent[x]);
        }       
        return parent[x];
    }
    
    void uni(int x, int y) {
        int xp = find(x), yp = find(y);
        if(xp == yp) {
            return;
        } else {
            count--;
            if(ranks[xp] > ranks[yp]) parent[yp] = xp;
            else if(ranks[xp] < ranks[yp])  parent[xp] = yp;
            else {
                parent[xp] = yp;
                ranks[yp]++;
            }
        }
    }
    
};
总结：
    这道题用union-find解的话，主要的问题就是怎么去求group数量，但其实可以这么去理解：一开始有n个点，那可以看成有n个group，如果在union过程当中，如
    果xp == yp，说明这两个点属于同一个group，那不需要更新。那如果不相等呢，就说明这两个点属于不同的group，那么当前访问的这条边就会将这两个group进行
    合并，那么group数就要减少一个。     
