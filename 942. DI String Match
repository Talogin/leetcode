class Solution {
public:
    vector<int> diStringMatch(string S) {
        vector<int> res;
        int lo = 0, hi = S.size();
        for(auto c : S) {
            if(c == 'I') {
                res.push_back(lo++);
            } else {
                res.push_back(hi--);
            }
        }
        res.push_back(lo);
        return res;
    }
};

思路：
  一开始想着对于每个关系“I”或者"D"来说，这个关系的第二个数怎么选，当时肯定是想到了双指针方法，但是发现行不通，如果D，你这个关系的第二个数选最小？那如果
  再接一个D呢，如果I，是一样的道理，貌似双指针不管用。
  但是如果对于每个关系，我们用双指针来决定关系的第一个数，就起作用了。比如D，我第一个数选最大，再接一个D，第二个D的第一个数，也就是第一个D的第二个数选择
  次大，第一个关系不仅成立，第二个关系也肯定会成立。
  双指针你一定要学会变换视角，第二个数显然我们是决定不了的，因为它与后一个关系有关，但是对于每个关系来说，我能决定第一个数，它是与后面的关系无关的。
