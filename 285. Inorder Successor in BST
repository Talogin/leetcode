/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
        if(root == NULL || p == NULL)    return NULL;
        
        TreeNode* suc = NULL;
        while(root) {
            if(root->val <= p->val) {
                root = root->right;
            } else {
                suc = root;
                root = root->left;
            }
        }
        return suc;
    }
};

idea:
    通过观察，可以得到这么一些基本信息，比p->val大的节点都有可能是要找的节点，所以需要不断记录，然后不断逼近；但是比它小的，只需要逼近，一个都不要记录
  这种解法就用到了binary search tree的大小关系的特性。
