/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> hp;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i = 0; i < inorder.size(); i++) {
            hp[inorder[i]] = i;
        }
        return helper(preorder, inorder, 0, 0, inorder.size()-1);
    }
    TreeNode* helper(vector<int>& pre, vector<int>& in, int preindex, int instart, int inend) {
        if(preindex > pre.size()-1 || instart > inend) return NULL;
        TreeNode* root = new TreeNode(pre[preindex]);
        int i = hp[pre[preindex]];
        root->left = helper(pre, in, preindex+1, instart, i-1);
        root->right = helper(pre, in, preindex+1+i-instart, i+1, inend);
        return root;
    }
};

idea:
  此题的主要思路就是根据preorder的第一个元素就是root来解。通过inorder来判断哪些元素在root左子树中，哪些元素在root右子树中。其实主要的还是依靠
  preorder来构建树，但是你并不知道哪个位置上的元素是root的左子树root，哪个位置的元素是root右子树root。那么如何计算位置呢？preorder中root紧接
  着的元素就是左子树的root,但是右子树root则得知道root左子树中有多少元素，所以就需要用到inorder，在inorder中找到当前root位置，然后它与instart
  之间的元素就是左子树元素，计算它们数目，然后在preorder中基于root位置进行计算就可以得到right root位置。

mistake:
    一开始没有设置inend参数，那么这样没有判断的话，会导致其实子树没有更多的元素了但是还是会不断迭代下去，这样会导致出错。所以一定要有个inend参数配合
instart参数来检查子树是否已经为空了。


class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int idx = 0;
        for(int i = 0; i < inorder.size(); i++) mp[inorder[i]] = i;
        return helper(preorder, inorder, idx, 0, inorder.size()-1);
    }
    
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int& idx, int left_bound, int right_bound) {
        if(left_bound > right_bound) return nullptr;
        
        int cur_val = preorder[idx++];
        int index = mp[cur_val];
        TreeNode* node = new TreeNode(cur_val);
        node->left = helper(preorder, inorder, idx, left_bound, index-1);
        node->right = helper(preorder, inorder, idx, index+1, right_bound);
        return node;
    }
    
private:
    unordered_map<int, int> mp;
};

总结：
    之前的写法太过冗杂了，而且上面的总结也有点问题，比如说preorder中root紧接着的元素并不一定是左子树的root，如果左子树为空，那它就是右子树的root了。
    那么这整个思想是怎样的呢？用一个idx索引，但要怎么样让idx按顺序指向要构建的元素呢？那就要看preorder是按什么顺序获得的了。preorder就是先访问当前
    节点，然后访问左子树，再访问右子树。那么我们构建的时候也这样构建，先构建当前节点node，然后构建左子树，再构建右子树。这样就能让idx依次地指向我们想
    要的元素了。
