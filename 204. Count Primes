class Solution {
public:
    int countPrimes(int n) {
        int cnt = 0;
        vector<int> isPrime(n, 1);
        for(int i = 2; i < n; i++) {
            if(isPrime[i]) {
                for(int j = 2; i * j < n; j++) isPrime[i*j] = 0;
                cnt++;
            }
        }
        return cnt;
    }
};

总结：
  一开始写了一个方法，是将2到n之间的每个数都进行计算，那么这样的复杂度大概有多少呢，首先有将近n个数，每个数的计算时间复杂度为O(i/2)，那么加起来应该是O(n^2)
  的时间复杂度。
  现在这个方法是怎么个思考过程呢，上面说到，每一个数我都从2开始计算判断是否为它的因子，这就会造成重复，我们可以用空间换时间。但是要注意的是只有当isPrime[i]
  为真的时候，才需要进行拓展计算，因为一个数如果不是prime,那么它必然由一些prime因子构成，那么由它拓展的数也一定被它的prime因子拓展过了。
