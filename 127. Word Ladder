class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int ans = 1;
        set<string> dic, visited;
        queue<string> q;
        q.push(beginWord);
        
        for(auto word : wordList) {
            dic.insert(word);
        }
        
        while(!q.empty()) {
            int sz = q.size();
            int cnt = 0;
            while(cnt < sz) {
                string cur = q.front();
                visited.insert(cur);
                q.pop();
                if(cur == endWord)  return ans;
                for(int i = 0; i < cur.size(); i++) {
                    char tmp = cur[i];
                    for(int j = 0; j < 26; j++) {
                        cur[i] = 'a'+j;
                        if(visited.find(cur) == visited.end() && dic.find(cur) != dic.end()) {
                            q.push(cur);
                            dic.erase(cur);
                        }   
                    }
                    cur[i] = tmp;
                }
                cnt++;
            }
            ans++;
        }
        return 0;
    }
    
};

思路：这题比较值得注意的一点就是中间向q中添加string的过程，记得一定要将dic中的cur删掉，你说我不是已经用visited来判断一个string是不是已经添加过了么。
但其实有可能你在前面已经将某个string已经添加到了q中，但是呢，这个string还没有被访问到，那么visited中这个string还是未被访问的状态。所以你有可能会重复
添加的。



