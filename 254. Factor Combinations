class Solution {
public:
    vector<vector<int>> getFactors(int n) {
        return helper(n, 1);
    }
    vector<vector<int>> helper(int target, int bound) {
        vector<vector<int>> res;
        for(int i = 2; i*i <= target; i++) {
            if(i >= bound && target % i == 0) {
                int a = target / i;
                res.push_back({i, a});
                
                vector<vector<int>> tmp = helper(a, i);
                for(auto vec : tmp) {
                    sort(vec.begin(), vec.end());
                    if(i > vec[0])  continue;
                    vec.push_back(i);
                    res.push_back(vec);
                }
                
            }
        }
        return res;
    }
};

以32为例子，对于32来说，从2开始尝试找它的因子，但是加上了i*i <= target的判断条件，这个是防止重复。比如说2 * 16 = 32, 如果不加这个条件，那么16 * 2
这种情况也会被处理，但是这个和2*16肯定是一样的，用i*i <= target可以防止这种情况发生，保证第一个因子比第二个因子小。记住，不能写成i <= target/2，
因为有的题中找因子，边界条件设的这个，那里应该是要找到所有的因子，而这里是要确保第一个因子小于第二个因子，比如32，16是它的因子，在前一种情况中，它是需要
被考虑进去的，但是这里不能考虑。
第二个，加上bound，也是出于防止重复的考虑，比如32，2*16是一种组合，4*8是一种组合，如果继续拆分，4可以拆分成2*2，16也可以拆分成2*8，那么这两种情况拆分
下去，肯定会有重复，那么怎么防止重复？一个是不拆分第一个因子，因为第一个因子拆分后的情况肯定会被之前更小的因子的搜索树包括，比如，4拆分成2*2，这肯定是包
括在2的情况中了。第二个是我们只从bound开始寻找，为什么呢，比如4*8这种情况，你说你不拆分4，那好，拆分8，那么我从2开始拆，又是2*4，这显然又在2*16中包含
了。那怎么拆呢，你说我不拆8行吗，可能这个情况，如果从4开始拆，8拆不了，不是个很好的例子。那么我们再看64，4*16，如果16不拆，就会有4*4*4这个组合被遗漏掉
所以16还是必须拆，而且还得以一种因子递增的形式去拆。
