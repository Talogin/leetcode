class Solution {
public:
    int findMin(vector<int>& nums) {
        int lo = 0, hi = nums.size()-1;
        while(lo < hi) {
            int mid = lo + (hi-lo) / 2;
            if(nums[mid] == nums[0]) {
                if(nums[lo] == nums[0]) lo++;
                if(nums[hi] == nums[0]) hi--;
            }
            else if(nums[mid] > nums[0])    lo = mid+1;
            else hi = mid;
        }
        return nums[lo] < nums[0] ? nums[lo] : nums[0];
    }
};

总结：
  和153类似，只不过这题可以有重复，重复增加的麻烦主要在于当nums[mid] == nums[0]的时候，你不能确定nums[mid]属于哪个分块了。
  那么当nums[mid] == nums[0]的时候，怎么去缩小搜索的范围呢，既然我们知道nums[mid] == nums[0]了，那么只要nums[lo]或者nums[hi]与nums[0]相等，
  那么说明hi和lo已经不在搜索范围内了，为什么呢？即使最小数与nums[lo]或者nums[hi]相等，我们已经有了nums[mid]了，而nums[mid]始终还是在下一次搜索
  范围内的，那么nums[lo]或者nums[hi]就没有必要再在下一次的搜索范围内了。所以就有了第7-9行的范围缩小。
