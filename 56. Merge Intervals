/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> vec;
        sort(intervals.begin(), intervals.end(), [](Interval& x, Interval& y) {
            return x.start < y.start;
        });
        for(int i = 0; i < intervals.size(); i++) {
            if(i+1 < intervals.size() && intervals[i].end >= intervals[i+1].start)
                intervals[i+1] = Interval(intervals[i].start, max(intervals[i].end, intervals[i+1].end));
            else
                vec.push_back(intervals[i]);
        }
        return vec;
    }
};


class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.empty()) return vector<Interval> {};
        vector<Interval> res;
        sort(intervals.begin(),intervals.end(),[](Interval a,Interval b){return a.start < b.start;});
        res.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            if(res.back().end < intervals[i].start) res.push_back(intervals[i]);
            else
                res.back().end = max(res.back().end,intervals[i].end);
        }
        return res;
    }
};


错误写法：
写法1：
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        sort(intervals.begin(), intervals.end(), cmp);
        Interval pre = Interval();
        for(auto& interval : intervals) {
            if(pre.end >= interval.start) {
                pre.end = max(pre.end, interval.end);
            } else {
                res.push_back(pre);
                pre = interval;
            }
        }
        return res;
    }
    
    static bool cmp(const Interval& x, const Interval& y) {
        if(x.start == y.start) {
            return x.end < y.end;
        } else {
            return x.start < y.start;
        }
    }
};

写法2：
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())   return res;
        sort(intervals.begin(), intervals.end(), cmp);
        Interval pre = intervals[0];
        for(int i = 0; i < intervals.size(); i++) {
            if(pre.end >= intervals[i].start) {
                pre.end = max(pre.end, intervals[i].end);
            } else {
                res.push_back(pre);
                pre = intervals[i];
                if(i+1 == intervals.size())
                    res.push_back(pre);
            }
        }
        return res;
    }
    
    static bool cmp(const Interval& x, const Interval& y) {
        if(x.start == y.start) {
            return x.end < y.end;
        } else {
            return x.start < y.start;
        }
    }
};

正确写法：
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())   return res;
        sort(intervals.begin(), intervals.end(), cmp);
        Interval pre = intervals[0];
        for(int i = 0; i < intervals.size(); i++) {
            if(pre.end >= intervals[i].start) {
                pre.end = max(pre.end, intervals[i].end);
            } else {
                res.push_back(pre);
                pre = intervals[i];
            }
            if(i+1 == intervals.size())
                    res.push_back(pre);           //这句一定要放在else语句外面，因为要考虑一下数组最后一个元素的情况。
        }
        return res;
    }
    
    static bool cmp(const Interval& x, const Interval& y) {
        if(x.start == y.start) {
            return x.end < y.end;
        } else {
            return x.start < y.start;
        }
    }
};
