class Solution {
public:
    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {
        if(nums.empty())    return {};
        vector<int> vec(nums.size());
        int begin = 0, end = nums.size()-1;
        int index = a > 0 ? nums.size()-1 : 0;
        if(a > 0) {
            while(begin <= end) {
                vec[index--] = helper(nums[begin], a, b, c) > helper(nums[end], a, b, c) ? helper(nums[begin++], a, b, c) :
                                                                                        helper(nums[end--], a, b, c);
            }
        } else if(a <= 0) {
            while(begin <= end) {
                vec[index++] = helper(nums[begin], a, b, c) < helper(nums[end], a, b, c) ? helper(nums[begin++], a, b, c) :
                                                                                        helper(nums[end--], a, b, c);
            }
        } 
        return vec;
    }
    int helper(int i, int a, int b, int c) {
        return a*i*i+b*i+c;
    }
};

错误写法：
  while(begin <= end)没有加等号。要知道这里一定要加等号，因为最后begin和end指向同一个数，这个数也得进入循环进行计算的。


思路：
  一开始的想法，看到是抛物线公式，那么就直接想到找准线了，然后根据离准线的距离来判断大小，但这个太麻烦了，情况很多，不简洁。而且判断大小并不一定要那么
  数学化，非得算下两者离准线的距离，写程序的话可以直接套公式计算出值然后比较大小就好了，这种计算可以不用考虑时间消耗，毕竟算是简单的运算。
  然后想到当a < 0的时候，其实就是两头肯定是最小，就直接首尾两个pointer，然后一直比较大小，直到两个pointer相遇就好了。但是当a > 0的时候怎么办呢，
  中间是最小，两端大，如果按照上面这个双pointer写法，还得需要进行reverse，那时间复杂度就直接上去了，貌似做不出来。但是忽略了一点，就是当reverse
  耗时的时候，我们尽量不用reverse就好，直接逐个赋值，那么怎么赋值呢？从后往前不就行了么，就是这一点没想到。
