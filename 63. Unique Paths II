class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int N = obstacleGrid.size(), M = obstacleGrid[0].size();
        vector<vector<long>> dp(N, vector<long>(M));
        dp[0][0] = obstacleGrid[0][0] != 1;
        for(int i = 0; i < N; i++)
            for(int j = 0; j < M; j++) {
                if(i == 0 && j == 0) continue;
                if(obstacleGrid[i][j] == 1)  dp[i][j] = 0;
                else if(i == 0) dp[i][j] = dp[i][j-1];
                else if(j == 0) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i-1][j] + dp[i][j-1];           
            }
        return (int)dp[N-1][M-1];
    }
};

错误点：
  1.需要考虑越界的问题，所以dp中的元素要存long，而不是int。
  2.边界条件的处理，在62题中，因为没有障碍，那么当i或j为0的时候，它们的dp值都是一样的，均为1，但是这里需要特别处理
