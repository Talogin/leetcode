/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<int> findRightInterval(vector<Interval>& intervals) {
        vector<int> ans;
        vector<int> vec;
        if(intervals.size() == 1) {
            ans.push_back(-1);
            return ans;
        }
        unordered_map<int, int> mp;
        for(int i = 0; i < intervals.size(); i++) {
            int start = intervals[i].start;
            mp[start] = i;
            vec.push_back(start);
        }
        sort(vec.begin(), vec.end());
        for(auto interval : intervals) {
            int low = 0, hi = intervals.size()-1;
            while(low < hi) {
                int mid = low + (hi-low)/2;
                if(vec[mid] < interval.end) {
                    low = mid+1;
                } else {
                    hi = mid;
                }
            }
            if(vec[low] < interval.end)
                ans.push_back(-1);
            else
                ans.push_back(mp[vec[low]]);
        }
        return ans;
    }
};

注意点：
  一开始写的时候在while循环结束后，对于是向ans中添加-1还是对应index的判断时，是直接判断if(low < hi),这样根本达不到效果。因为找到最后肯定是low与
high相等，然后跳出循环，low和high同时指向的那个interval就是二分法帮你找到的interval。但是这个interval并不一定满足要求，比如说某个interval的end
足够大，数组中没有满足要求的interval，虽然二分法也会竭尽全力去帮你找，但这个时候所找到的interval无非是数组中start最大的那个，但还是没有这个end大。
所以最后跳出循环判断一下low对应的start是否小于目前操作的interval.end。
