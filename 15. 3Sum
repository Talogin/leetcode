class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.empty())    return {};
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size()-1;) {
            int lo = i+1, hi = nums.size()-1, target = -nums[i];
            while(lo < hi) {
                int sum = nums[lo] + nums[hi];
                if(sum == target) {
                    res.push_back({nums[i], nums[lo], nums[hi]});
                    while(++lo < hi && nums[lo] == nums[lo-1])  continue;
                    while(lo < --hi && nums[hi] == nums[hi+1])  continue;
                }
                else if(sum > target) hi--;
                else lo++;
            }
            while(++i < nums.size()-1 && nums[i] == nums[i-1])  continue;
        }
        return res;
    }
};

总结：
  这题是有点类似于combination那种，每个set中的元素是不讲顺序的，要求不重复，也就是[1,2,3]和[3,2,1]是看成一个的。
  对于这种一般是要先排下序。然后每次去重复，这里的去重复有点讲究，就是19行，13，14行。在进行相邻元素比较之前，最好是先要自增或自减一下，你不能直接拿当前
  元素去比，那样循环结束之后还带进行一次的++或--操作，比如如下的代码：
  while(left<right&&nums[left]==nums[left+1]) ++left;
  while(left<right&&nums[right]==nums[right-1]) --right;
  ++left;--right;
  比如29行，循环结束后，left指向的还是和之前相同的元素，是nums[left+1]开始不同，所以要31行补一个，这样代码就不简洁了。
