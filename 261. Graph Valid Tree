class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
        if(edges.empty())   return n == 1;
        vector<vector<int>> graph(n, vector<int>());
        for(auto e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<int> visited(n, 0);
        if(!detectCyc(-1, edges[0][0], graph, visited)) {
            return false;
        }
        return edges.size() == n-1;
    }
    bool detectCyc(int pre, int node, vector<vector<int>>& graph, vector<int>& visited) {
        if(visited[node]) return false;
        visited[node] = 1;
        for(auto n : graph[node]) {
            if(pre == n) continue;
            if(!detectCyc(node, n, graph, visited)) {
                return false;
            }
        }
        visited[node] = 0;
        return true;
    }
};
错误解法：
  if(!detectCyc(-1, edges[0][0], graph, visited))这个判断条件写成了if(!detectCyc(-1, 0, graph, visited))，但有种情况不可行，就是0这个
节点是孤立的，但是其他点正好构成一个环，如[[1,2],[2,3],[3,1]]。
然后你还得考虑edges是否为空，因为你直接访问了edges[0][0]。
