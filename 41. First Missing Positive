class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        if(nums.empty())    return 1;
        nums.push_back(-1);
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == i)    continue;
            if(nums[i] < 0 || nums[i] >= nums.size())   continue;
            while(nums[i] != i) {
                if(nums[i] < 0 || nums[i] >= nums.size())   break;
                if(nums[nums[i]] == nums[i])    break;
                int tmp = nums[nums[i]];
                nums[nums[i]] = nums[i];
                nums[i] = tmp;
            }
        }
        
        for(int i = 1; i < nums.size(); i++) 
            if(nums[i] != i)    return i;
        return nums.back()+1;
    }
};



class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int len = nums.size();
        for(int i=0; i<len; i++) {
            while(nums[i]>0 && nums[i]<=len && nums[i]!=nums[nums[i]-1]){
                swap(nums[i], nums[nums[i]-1]);
            }
        }
        
        for(int i=0; i<len; i++) {
            if(nums[i]!=i+1)
                return i+1;
        }
        return nums.size()+1;
    }
};

总结：
  为什么会想起来加上第5行呢，是有一个case比如[2,1]，明显nums[2]已经越界了，那么就想着要不就push_back一个，这样怎么都不会越界了。
  当然第二个方法更加简洁一点。要注意的是，第31行nums[i]!=nums[nums[i]-1]有两个作用，一个是判断第i位是否已经放好了，比如nums[0]如果是1，那么就
  表示第0位已经放好了；另一个作用就是防止死循环，比如[2,2]，访问nums[0]时，如果没有这个判断的话，会一直swap(nums[1], nums[0])。
  
  我一开始的做法中将nums[i]==0的那个i也进行处理，如果数组中出现0的话，将0放到nums[0]的位置上，我的想法并不明确，隐约觉得index 0是一个合法的index,
  它不像那些负数及大于数组size的index，它是可以访问的，既然能访问，说不定index 0上本身放着另外一个合法的index，那么如果对0不处理的话，那index 0上
  放的那个index不是取不出来了吗？
  正确思路其实是这样的，比如说对于nums[i]来说，你去处理它，这个处理即将nums[i]放到正确位置，然后将那个位置上的值放到nums[i]上来，它的最根本的原因是
  什么？是为了取出那个正确位置上的值吗？比如nums[0] = 2,你处理它是将2放到nums[1]上，假设nums[1]本身为3，再将3放到nums[0]上。你处理nums[0]是为了
  取出3来吗？并不是，最主要原因还是你要将2放到正确位置，然后顺带着怕这个值被覆盖了，然后将这个值取出。而且即使你不取出，因为这是从0开始遍历的，也一定会
  访问到这个值，只有什么情况下才会访问不到呢，只有被覆盖了才会访问不到，不管0，nums[0]上的值会不会访问不到呢，不会，因为不管0不会导致nums[0]被覆盖。
  
  
  
  
  
  
  
  
  
  
