class Solution {
public:
    bool isOneEditDistance(string s, string t) {
        bool flag = false;
        if(s.size() == t.size()) {
            flag = isReplace(s, t);
        }
        else if(s.size() > t.size()) {
            flag = isDelete(s, t);
        }
        else {
            flag = isInsert(s, t);
        }
        return flag;
    }
    bool isReplace(const string& s, const string& t) {
        int count = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] != t[i])
                count++;
        }
        return count == 1;        
    }
    bool isDelete(const string& s, const string& t) {
        if(s.size() != t.size()+1)
            return false;
        for(int i = 0, j = 0; i < s.size() && j < t.size(); i++,j++) {
            if(s[i] != t[j]) {
                if(i == j)  j--;
                else    return false;
            }
        }
        return true;
    }
    bool isInsert(const string& s, const string& t) {
        if(s.size()+1 != t.size())
            return false;
        for(int i = 0, j = 0; i < t.size() && j < s.size(); i++,j++) {
            if(t[i] != s[j]) {
                if(i == j)  j--;
                else    return false;
            }
        }
        return true;
    }
};

错误原因：
  错误地方就是一开始用unordered_map来做了，以为就是查看两个字符串的字符有多少个不一样，但这题需要考虑字符与字符的顺序对应，所以不可以用unordered_map.
第二个错误的地方就是一开始将isDelete()和isInsert()中的j--写成了i++.认为两个字符串从头开始比较，如果第一次出现了不一样了，较长的字符串的遍历器i往
后移一个，看后半部分是否一致。但是这儿忽略了一点，当第一次出现不同的时候，较长字符串中的这个字符确实需要跳过，但是你要注意到for中已经对i和j进行自增了。
所以如果再对i加1，就相当于往后跳了两位。你其实要做的是出现不同，短字符串的遍历器不变，停在原始位置，而长的往后跳一位。


  
  
