class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.empty())    return {};
        sort(nums.begin(), nums.end());
        int n = nums.size(), max_idx = 0;
        vector<int> pre(n, -1), count(n, 1);
        
        for(int i = 0; i < n; i++) {
            for(int j = i-1; j >= 0; j--) {
                if(nums[i] % nums[j] == 0) {
                    if(count[j]+1 > count[i]) {
                        count[i] = count[j]+1;
                        pre[i] = j;
                    }
                }
            }
            if(count[i] > count[max_idx]) {
                max_idx = i;    
            }
        }
        vector<int> res;
        while(max_idx != -1) {
            res.push_back(nums[max_idx]);
            max_idx = pre[max_idx];
            
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

思路：
  这题一开始想卡壳了，但主要的问题就在于主问题与子问题之间的关系没有搞清楚。其实很简单，如果一个数能够整除另一个数，那它必然也能整除另一个数局部最优解中
  所有的数。这道题另一个值得学习的地方就是利用vector去记录每个元素局部最优解中它的前一个元素的index，而不是存储整个的vector。
