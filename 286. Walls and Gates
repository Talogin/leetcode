class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int n = rooms.size(), m = n ? rooms[0].size() : 0;
        queue<pair<int, int>> q;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(rooms[i][j] == 0) {
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()) {
            auto node = q.front();
            q.pop();
            for(int i = - 1; i <= 1; i++) {
                for(int j = -1; j <= 1; j++) {
                    if(i != j && i != -j) {
                        if(node.first+i >= 0 && node.first+i < n && node.second+j >= 0 && node.second+j < m) {
                            if(rooms[node.first+i][node.second+j] != -1 && rooms[node.first+i][node.second+j] != 0) {
                                if(rooms[node.first+i][node.second+j] > rooms[node.first][node.second]+1) {
                                    rooms[node.first+i][node.second+j] = rooms[node.first][node.second]+1;
                                    q.push({node.first+i, node.second+j});
                                }
                            } 
                        }
                    }
                }
            }
        }
    }
};

错误：
  一开始i != j && i != -j这儿就写了前半部分，以为就够了


class Solution {
    vector<vector<int>> dir = {{+1,0}, {-1,0}, {0,+1}, {0,-1}};
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        queue<int> q;
        int n = rooms.empty() ? 0 : rooms[0].size();
        for(int i = 0; i < rooms.size(); i++)
            for(int j = 0; j < rooms[0].size(); j++)
                if(rooms[i][j] == 0)    q.push(i * n + j);
        
        while(!q.empty()) {
            auto room = q.front();
            q.pop();
            int x = room / n, y = room % n;
            for(auto& d : dir) {
                int neigh_x = x+d[0];
                int neigh_y = y+d[1];
                if(neigh_x >= 0 && neigh_x < rooms.size() && neigh_y >= 0 && neigh_y < rooms[0].size()) {
                    if(rooms[neigh_x][neigh_y] == INT_MAX) {
                        rooms[neigh_x][neigh_y] = rooms[x][y]+1;
                        q.push(neigh_x*n+neigh_y);
                    }
                }
            }
        }
    }
};

上面是二刷时遇到的更好的解法，首先是52-55行这儿对上下左右四个方向拓展时比之前的写法更清晰一点，也不容易出错。
第二个是queue中存放是int，将横纵坐标整合成一个int，这大大降低了时间复杂度。
